<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>每日一记</title>
    <link>http://xpt.one/</link>
    <description>Recent content on 每日一记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn-zh</language>
    <copyright>© Sun</copyright>
    <lastBuildDate>Wed, 02 Aug 2023 14:44:45 +0800</lastBuildDate><atom:link href="http://xpt.one/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>神奇的this指向</title>
      <link>http://xpt.one/posts/%E7%A5%9E%E5%A5%87%E7%9A%84this%E6%8C%87%E5%90%91/</link>
      <pubDate>Wed, 02 Aug 2023 14:44:45 +0800</pubDate>
      
      <guid>http://xpt.one/posts/%E7%A5%9E%E5%A5%87%E7%9A%84this%E6%8C%87%E5%90%91/</guid>
      <description>This 指向总结 在 JavaScript 中，this 的指向并不是固定的，而是取决于函数的调用方式。以下是 this 在不同情况下的指向：
全局环境：在非严格模式下，this 指向全局对象；在严格模式下，this 的值为 undefined。
函数调用：这也分为非严格模式和严格模式。在非严格模式下，函数中的 this 指向全局对象；而在严格模式下，函数中的 this 的值为 undefined。
方法调用：当函数作为某个对象的方法被调用时，this 指向该对象。
这里很有意思，也使我真的懂得了什么是调用决定。
const obj = { name: &amp;#39;sun&amp;#39;, getName: function () { return this.name; }, }; console.log(obj.getName()); // sun const getName = obj.getName; console.log(getName()); // undefined 构造函数：在构造函数中，this 指向新创建的实例对象。
箭头函数：箭头函数没有自身的 this，它里面的 this 实际上是继承自外层代码块的 this。
显式绑定：通过 call、apply、bind 等方法可以显式地设置函数中 this 的指向。
事件处理函数：在事件处理函数中，this 通常指向触发事件的元素。
DOM 事件监听：addEventListener 的回调函数中的 this，指向的是绑定事件的元素本身。
需要注意的是，this 的指向是在函数调用时决定的，而不是在函数定义时决定的。</description>
    </item>
    
  </channel>
</rss>
